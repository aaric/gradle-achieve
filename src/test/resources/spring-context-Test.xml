<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!--// 使Spring关注Annotation -->
	<context:annotation-config />

	<!--// 指定事务使用注解驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!--// 让Spring通过自动扫描来查询和管理Bean -->
	<context:component-scan base-package="com.github.aaric.**.dao" />
	<context:component-scan base-package="com.github.aaric.**.service" />

	<!--// 获得jdbc.properties数据源配置信息 -->
	<bean id="dataSourceProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db-Test.properties</value>
				<value>classpath:redis-Test.properties</value>
				<value>classpath:server-Test.properties</value>
			</list>
		</property>
	</bean>

	<!--// 配置jdbc数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="${connection.driverClassName}" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="${connection.url}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="${connection.username}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${connection.password}" />
		<!-- 指定连接池中保留的最大连接数. Default:15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
	</bean>

	<!--// 配置mybatis工厂Bean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config-Test.xml"></property>
	</bean>

	<!--// 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--// 采用自动扫描方式创建mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.github.aaric.**.dao" />
	</bean>
	
	<!--// 配置redis服务 -->
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"
		scope="singleton">
		<constructor-arg index="0">
			<bean class="redis.clients.jedis.JedisPoolConfig">
				<property name="maxTotal" value="${redis.maxActive}" />
				<property name="maxIdle" value="${redis.maxIdle}" />
				<property name="maxWaitMillis" value="${redis.maxWait}" />
				<property name="testOnBorrow" value="${redis.testOnBorrow}" />
				<property name="testOnReturn" value="${redis.testOnReturn}" />
				<property name="testWhileIdle" value="true"/>
			</bean>
		</constructor-arg>
		<constructor-arg index="1">
			<list>
				<bean class=" redis.clients.jedis.JedisShardInfo">
					<constructor-arg name="host" value="${redis.host}" />
					<constructor-arg name="port" value="${redis.port}" />
					<constructor-arg name="timeout" value="${redis.timeout}" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<!--// 配置FtpUtils -->
	<bean id="ftpUtils" class="com.github.aaric.utils.FtpUtils">
		<property name="serverFtpPort" value="${server.ftp.port}" />
		<property name="serverFtpHost" value="${server.ftp.host}" />
		<property name="accountFtpUsername" value="${account.ftp.username}" />
		<property name="accountFtpPassword" value="${account.ftp.password}" />
		<property name="serverFtpConnectTimeout" value="${server.ftp.connect.timeout}" />
		<property name="serverFtpDataTimeout" value="${server.ftp.data.timeout}" />
	</bean>

</beans>